// Autogenerated with StateSmith 0.17.0+31be1fc54adc06a86e0e6ed18288dcac427197fe.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Whatever you put in this `FileTop` section will end up 
// being printed at the top of every generated code file.

using System;
using System.Threading;

// Generated state machine
public partial class Goomba
{
    public enum EventId
    {
        ONCOLLISION = 0,
    }

    public const int EventIdCount = 1;

    public enum StateId
    {
        ROOT = 0,
        MOVELEFT = 1,
        MOVERIGHT = 2,
    }

    public const int StateIdCount = 3;

    // Used internally by state machine. Feel free to inspect, but don't modify.
    public StateId stateId;

    // State machine variables. Can be used for inputs, outputs, user variables...
    public struct Vars
    {
        public MyTime timer; // TODO! you need to make the varuables public!
        public long count;
    }

    // Variables. Can be used for inputs, outputs, user variables...
    public Vars vars = new Vars();

    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    public Goomba()
    {
        // TODO! you need to add this part!
        this.vars.timer = new MyTime();
    }

    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    public void Start()
    {
        ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.

            // Step 2: Transition action: ``.

            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.

            // ROOT.<InitialState> behavior
            // uml: TransitionTo(MoveLeft)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.

                // Step 2: Transition action: ``.

                // Step 3: Enter/move towards transition target `MoveLeft`.
                MOVELEFT_enter();

                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }

    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    public void DispatchEvent(EventId eventId)
    {
        this.vars.count += this.vars.timer.deltaTime; // TODO! add this line
        switch (this.stateId)
        {
            // STATE: NPCCharacter
            case StateId.ROOT:
                // state and ancestors have no handler for `oncollision` event.
                break;

            // STATE: MoveLeft
            case StateId.MOVELEFT:
                MOVELEFT_oncollision();
                break;

            // STATE: MoveRight
            case StateId.MOVERIGHT:
                MOVERIGHT_oncollision();
                break;
        }

    }

    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    private void ExitUpToStateHandler(StateId desiredState)
    {
        while (this.stateId != desiredState)
        {
            switch (this.stateId)
            {
                case StateId.MOVELEFT: MOVELEFT_exit(); break;

                case StateId.MOVERIGHT: MOVERIGHT_exit(); break;

                default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
            }
        }
    }


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private void ROOT_enter()
    {
        this.stateId = StateId.ROOT;
    }


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state MOVELEFT
    ////////////////////////////////////////////////////////////////////////////////
    private void moveLeft() { } // TODO it is up to you to define this method!
    private void MOVELEFT_enter()
    {
        this.stateId = StateId.MOVELEFT;

        // MoveLeft behavior
        // uml: enter / { count += timer.deltaTime; moveLeft(); }
        {
            // Step 1: execute action `count += timer.deltaTime; moveLeft();`
            this.vars.count += this.vars.timer.deltaTime; moveLeft();
        } // end of behavior for MoveLeft
    }

    private void MOVELEFT_exit()
    {
        // MoveLeft behavior
        // uml: exit / { count = 0; }
        {
            // Step 1: execute action `count = 0;`
            this.vars.count = 0;
        } // end of behavior for MoveLeft

        this.stateId = StateId.ROOT;
    }

    private void MOVELEFT_oncollision()
    {
        // MoveLeft behavior
        // uml: OnCollision [count > 5000] TransitionTo(MoveRight)
        if (this.vars.count > 5000)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            MOVELEFT_exit();

            // Step 2: Transition action: ``.

            // Step 3: Enter/move towards transition target `MoveRight`.
            MOVERIGHT_enter();

            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for MoveLeft

        // No ancestor handles this event.
    }


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state MOVERIGHT
    ////////////////////////////////////////////////////////////////////////////////

    private void MOVERIGHT_enter()
    {
        this.stateId = StateId.MOVERIGHT;

        // MoveRight behavior
        // uml: enter / { time += timer.deltaTime; moveLeft(); }
        {
            // Step 1: execute action `time += timer.deltaTime; moveLeft();`
            this.vars.count += this.vars.timer.deltaTime; moveLeft();
        } // end of behavior for MoveRight
    }

    private void MOVERIGHT_exit()
    {
        // MoveRight behavior
        // uml: exit / { count = 0; }
        {
            // Step 1: execute action `count = 0;`
            this.vars.count = 0;
        } // end of behavior for MoveRight

        this.stateId = StateId.ROOT;
    }

    private void MOVERIGHT_oncollision()
    {
        // MoveRight behavior
        // uml: OnCollision [count > 6000] TransitionTo(MoveLeft)
        if (this.vars.count > 6000)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            MOVERIGHT_exit();

            // Step 2: Transition action: ``.

            // Step 3: Enter/move towards transition target `MoveLeft`.
            MOVELEFT_enter();

            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for MoveRight

        // No ancestor handles this event.
    }

    // Thread safe.
    public static string StateIdToString(StateId id)
    {
        switch (id)
        {
            case StateId.ROOT: return "ROOT";
            case StateId.MOVELEFT: return "MOVELEFT";
            case StateId.MOVERIGHT: return "MOVERIGHT";
            default: return "?";
        }
    }

    // Thread safe.
    public static string EventIdToString(EventId id)
    {
        switch (id)
        {
            case EventId.ONCOLLISION: return "ONCOLLISION";
            default: return "?";
        }
    }

    public static void GoombaExample()
    {
        var g = new Goomba();
        g.Start();
        Console.WriteLine(Goomba.StateIdToString(g.stateId));
        g.DispatchEvent(Goomba.EventId.ONCOLLISION);
        Console.WriteLine(Goomba.StateIdToString(g.stateId));
        g.DispatchEvent(Goomba.EventId.ONCOLLISION);
        Console.WriteLine(Goomba.StateIdToString(g.stateId));
        g.DispatchEvent(Goomba.EventId.ONCOLLISION);
        Console.WriteLine(Goomba.StateIdToString(g.stateId));
        g.DispatchEvent(Goomba.EventId.ONCOLLISION);
        Console.WriteLine(Goomba.StateIdToString(g.stateId));
        Console.WriteLine("Now waiting for 8 seconds...");
        Thread.Sleep(8000);
        g.DispatchEvent(Goomba.EventId.ONCOLLISION);
        Console.WriteLine(Goomba.StateIdToString(g.stateId));
        g.DispatchEvent(Goomba.EventId.ONCOLLISION);
        Console.WriteLine(Goomba.StateIdToString(g.stateId));
        Console.WriteLine("Now waiting for 8 seconds...");
        Thread.Sleep(8000);
        g.DispatchEvent(Goomba.EventId.ONCOLLISION);
        Console.WriteLine(Goomba.StateIdToString(g.stateId));
        g.DispatchEvent(Goomba.EventId.ONCOLLISION);
        Console.WriteLine(Goomba.StateIdToString(g.stateId));
    }
}